//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Prefabs/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""Menu"",
            ""id"": ""b91efb5d-5e40-4f60-be0a-3be6b53ab30b"",
            ""actions"": [
                {
                    ""name"": ""New action"",
                    ""type"": ""Button"",
                    ""id"": ""8da745fa-2f67-4528-8f9f-6c3b3f10e3f0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""7b56d0e7-abee-4da6-ad4d-dfeb2bea9e1e"",
                    ""path"": ""Esc"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PlayerActionMap"",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c0795800-004b-41bf-8e8e-3d63c473baf6"",
                    ""path"": ""Space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PlayerActionMap"",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Movment"",
            ""id"": ""a3f7b101-89d5-4ede-9893-4ab2c789ac0d"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""0cc9ced1-148a-47e6-b6f4-f16340831b2f"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""115d844b-e177-46bc-b828-112d5d69198e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""36c65855-595e-4b66-840c-e3e444c063f0"",
                    ""path"": ""w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PlayerActionMap"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""51f2ae1c-d6ab-416b-ae79-9edd45cff6bc"",
                    ""path"": ""a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PlayerActionMap"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""412c1b92-53c3-4412-bbf9-ea72f15c017a"",
                    ""path"": ""s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PlayerActionMap"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""269c3ebe-680a-4ca4-be4f-3f4080e8524b"",
                    ""path"": ""d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PlayerActionMap"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fcec892e-37d7-4519-83dd-ec75a14110ac"",
                    ""path"": ""Space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PlayerActionMap"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Interact"",
            ""id"": ""1c522d8f-9b0b-497a-9864-5bd6d486f39f"",
            ""actions"": [
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""d1715506-0e90-456b-96b5-d9792feefe32"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SwitchPlayer"",
                    ""type"": ""Button"",
                    ""id"": ""ae18b1eb-4244-4fd7-8ac7-a5007fada5d1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""7fafc135-eb2f-48e5-9002-e76a19ad289d"",
                    ""path"": ""e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PlayerActionMap"",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0a3a4566-8e57-4519-a56b-bb0715a2129e"",
                    ""path"": ""1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PlayerActionMap"",
                    ""action"": ""SwitchPlayer"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""89e7a72e-3709-4201-9374-e8058114a28a"",
                    ""path"": ""2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PlayerActionMap"",
                    ""action"": ""SwitchPlayer"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""414aa876-da3c-4a89-b854-d2a5e8fe1ced"",
                    ""path"": ""3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PlayerActionMap"",
                    ""action"": ""SwitchPlayer"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""PlayerActionMap"",
            ""bindingGroup"": ""PlayerActionMap"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Joystick>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Menu
        m_Menu = asset.FindActionMap("Menu", throwIfNotFound: true);
        m_Menu_Newaction = m_Menu.FindAction("New action", throwIfNotFound: true);
        // Movment
        m_Movment = asset.FindActionMap("Movment", throwIfNotFound: true);
        m_Movment_Move = m_Movment.FindAction("Move", throwIfNotFound: true);
        m_Movment_Jump = m_Movment.FindAction("Jump", throwIfNotFound: true);
        // Interact
        m_Interact = asset.FindActionMap("Interact", throwIfNotFound: true);
        m_Interact_Interact = m_Interact.FindAction("Interact", throwIfNotFound: true);
        m_Interact_SwitchPlayer = m_Interact.FindAction("SwitchPlayer", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Menu
    private readonly InputActionMap m_Menu;
    private List<IMenuActions> m_MenuActionsCallbackInterfaces = new List<IMenuActions>();
    private readonly InputAction m_Menu_Newaction;
    public struct MenuActions
    {
        private @PlayerControls m_Wrapper;
        public MenuActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Newaction => m_Wrapper.m_Menu_Newaction;
        public InputActionMap Get() { return m_Wrapper.m_Menu; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MenuActions set) { return set.Get(); }
        public void AddCallbacks(IMenuActions instance)
        {
            if (instance == null || m_Wrapper.m_MenuActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MenuActionsCallbackInterfaces.Add(instance);
            @Newaction.started += instance.OnNewaction;
            @Newaction.performed += instance.OnNewaction;
            @Newaction.canceled += instance.OnNewaction;
        }

        private void UnregisterCallbacks(IMenuActions instance)
        {
            @Newaction.started -= instance.OnNewaction;
            @Newaction.performed -= instance.OnNewaction;
            @Newaction.canceled -= instance.OnNewaction;
        }

        public void RemoveCallbacks(IMenuActions instance)
        {
            if (m_Wrapper.m_MenuActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMenuActions instance)
        {
            foreach (var item in m_Wrapper.m_MenuActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MenuActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MenuActions @Menu => new MenuActions(this);

    // Movment
    private readonly InputActionMap m_Movment;
    private List<IMovmentActions> m_MovmentActionsCallbackInterfaces = new List<IMovmentActions>();
    private readonly InputAction m_Movment_Move;
    private readonly InputAction m_Movment_Jump;
    public struct MovmentActions
    {
        private @PlayerControls m_Wrapper;
        public MovmentActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Movment_Move;
        public InputAction @Jump => m_Wrapper.m_Movment_Jump;
        public InputActionMap Get() { return m_Wrapper.m_Movment; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MovmentActions set) { return set.Get(); }
        public void AddCallbacks(IMovmentActions instance)
        {
            if (instance == null || m_Wrapper.m_MovmentActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MovmentActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
        }

        private void UnregisterCallbacks(IMovmentActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
        }

        public void RemoveCallbacks(IMovmentActions instance)
        {
            if (m_Wrapper.m_MovmentActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMovmentActions instance)
        {
            foreach (var item in m_Wrapper.m_MovmentActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MovmentActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MovmentActions @Movment => new MovmentActions(this);

    // Interact
    private readonly InputActionMap m_Interact;
    private List<IInteractActions> m_InteractActionsCallbackInterfaces = new List<IInteractActions>();
    private readonly InputAction m_Interact_Interact;
    private readonly InputAction m_Interact_SwitchPlayer;
    public struct InteractActions
    {
        private @PlayerControls m_Wrapper;
        public InteractActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Interact => m_Wrapper.m_Interact_Interact;
        public InputAction @SwitchPlayer => m_Wrapper.m_Interact_SwitchPlayer;
        public InputActionMap Get() { return m_Wrapper.m_Interact; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(InteractActions set) { return set.Get(); }
        public void AddCallbacks(IInteractActions instance)
        {
            if (instance == null || m_Wrapper.m_InteractActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_InteractActionsCallbackInterfaces.Add(instance);
            @Interact.started += instance.OnInteract;
            @Interact.performed += instance.OnInteract;
            @Interact.canceled += instance.OnInteract;
            @SwitchPlayer.started += instance.OnSwitchPlayer;
            @SwitchPlayer.performed += instance.OnSwitchPlayer;
            @SwitchPlayer.canceled += instance.OnSwitchPlayer;
        }

        private void UnregisterCallbacks(IInteractActions instance)
        {
            @Interact.started -= instance.OnInteract;
            @Interact.performed -= instance.OnInteract;
            @Interact.canceled -= instance.OnInteract;
            @SwitchPlayer.started -= instance.OnSwitchPlayer;
            @SwitchPlayer.performed -= instance.OnSwitchPlayer;
            @SwitchPlayer.canceled -= instance.OnSwitchPlayer;
        }

        public void RemoveCallbacks(IInteractActions instance)
        {
            if (m_Wrapper.m_InteractActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IInteractActions instance)
        {
            foreach (var item in m_Wrapper.m_InteractActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_InteractActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public InteractActions @Interact => new InteractActions(this);
    private int m_PlayerActionMapSchemeIndex = -1;
    public InputControlScheme PlayerActionMapScheme
    {
        get
        {
            if (m_PlayerActionMapSchemeIndex == -1) m_PlayerActionMapSchemeIndex = asset.FindControlSchemeIndex("PlayerActionMap");
            return asset.controlSchemes[m_PlayerActionMapSchemeIndex];
        }
    }
    public interface IMenuActions
    {
        void OnNewaction(InputAction.CallbackContext context);
    }
    public interface IMovmentActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
    }
    public interface IInteractActions
    {
        void OnInteract(InputAction.CallbackContext context);
        void OnSwitchPlayer(InputAction.CallbackContext context);
    }
}
